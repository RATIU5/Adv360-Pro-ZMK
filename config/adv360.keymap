
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
  behaviors {
    #include "macros.dtsi"

    hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <200>;
        quick_tap_ms = <175>;
        flavor = "tap-preferred";
        bindings = <&kp>, <&kp>;
    };

		meo: exclamation_one {
				compatible = "zmk,behavior-mod-morph";
				label = "EXPLANATION_ONE";
				#binding-cells = <0>;
				bindings = <&kp EXCL>, <&kp N1>;
				mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		mlbkt: left_bracket_two {
				compatible = "zmk,behavior-mod-morph";
				label = "LEFT_BRACKET_TWO";
				#binding-cells = <0>;
				bindings = <&kp LBKT>, <&kp N2>;
				mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		mlbrt: left_brace_three {
				compatible = "zmk,behavior-mod-morph";
				label = "LEFT_BRACE_THREE";
				#binding-cells = <0>;
				bindings = <&kp LBRC>, <&kp N3>;
				mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		mlpf: left_parenthesis_four {
				compatible = "zmk,behavior-mod-morph";
				label = "LEFT_PARENTHESIS_FOUR";
				#binding-cells = <0>;
				bindings = <&kp LPAR>, <&kp N4>;
				mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		maf: ampersand_five {
				compatible = "zmk,behavior-mod-morph";
				label = "AMPERSAND_FIVE";
				#binding-cells = <0>;
				bindings = <&kp AMPS>, <&kp N5>;
				mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		mbkdl: backspace_delete {
				compatible = "zmk,behavior-mod-morph";
				label = "BACKSPACE_DELETE";
				#binding-cells = <0>;
				bindings = <&kp BSPC>, <&kp DEL>;
				mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		mcs: caret_six {
				compatible = "zmk,behavior-mod-morph";
				label = "CARET_SIX";
				#binding-cells = <0>;
				bindings = <&kp CARET>, <&kp N6>;
				mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		mrps: right_parenthesis_seven {
				compatible = "zmk,behavior-mod-morph";
				label = "RIGHT_PARENTHESIS_SEVEN";
				#binding-cells = <0>;
				bindings = <&kp RPAR>, <&kp N7>;
				mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		mrbre: right_brace_eight {
				compatible = "zmk,behavior-mod-morph";
				label = "RIGHT_BRACE_EIGHT";
				#binding-cells = <0>;
				bindings = <&kp RBRC>, <&kp N8>;
				mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		mrbkn: right_bracket_nine {
				compatible = "zmk,behavior-mod-morph";
				label = "RIGHT_BRACKET_NINE";
				#binding-cells = <0>;
				bindings = <&kp RBKT>, <&kp N9>;
				mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		masz: asterisk_zero {
				compatible = "zmk,behavior-mod-morph";
				label = "ASTERISK_ZERO";
				#binding-cells = <0>;
				bindings = <&kp KP_ASTERISK>, <&kp N0>;
				mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		mad: at_dollar {
				compatible = "zmk,behavior-mod-morph";
				label = "AT_DOLLAR";
				#binding-cells = <0>;
				bindings = <&kp AT>, <&kp DOLLAR>;
				mods = <(MOD_LSFT|MOD_RSFT)>;
		};

		mhp: hash_percent {
				compatible = "zmk,behavior-mod-morph";
				label = "HASH_PERCENT";
				#binding-cells = <0>;
				bindings = <&kp HASH>, <&kp PRCNT>;
				mods = <(MOD_LSFT|MOD_RSFT)>;
		};

  };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
         &none              &meo            &mlbkt          &mlbrt                 &mlpf           &maf                   &tog 1                                                                                              &none      &mcs           &mrps        &mrbre          &mrbkn          &masz                 &none
     &kp GRAVE             &kp Q             &kp W           &kp E                 &kp R          &kp T                 &kp HOME                                                                                        &kp PAGE_UP     &kp Y           &kp U         &kp I           &kp O          &kp P         &kp BACKSLASH
 &mt LCTRL ESC             &kp A             &kp S           &kp D                 &kp F          &kp G                  &kp END  &kp LEFT_COMMAND     &kp LALT   &none   &none      &kp LA(LCMD)  &kp LA(LSHFT)      &kp PAGE_DOWN     &kp H           &kp J         &kp K           &kp L  &kp SEMICOLON      &kp SINGLE_QUOTE
     &kp LSHFT             &kp Z             &kp X           &kp C                 &kp V          &kp B                    &none             &none    &kp LG(V)   &none   &none         &kp LG(Z)          &none              &none     &kp N           &kp M     &kp COMMA      &kp PERIOD      &kp SLASH             &kp RSHFT
         &mo 2         &kp EQUAL              &mad  &kp LEFT_ARROW       &kp RIGHT_ARROW                                  &mbkdl           &kp TAB    &kp LG(C)                     &kp LG(LS(Z))      &kp ENTER          &kp SPACE            &kp DOWN_ARROW  &kp UP_ARROW            &mhp      &kp MINUS                 &mo 3
            >;
        };

        layer_NUMPAD {
            bindings = <
 &trans  &trans      &trans  &trans  &trans  &trans            &tog 1                                                     &trans  &trans  &kp KP_NUMLOCK  &kp KP_EQUAL  &kp KP_SLASH  &kp KP_ASTERISK  &trans
 &trans  &trans      &trans  &trans  &trans  &trans            &trans                                                     &trans  &trans       &kp KP_N7     &kp KP_N8     &kp KP_N9     &kp KP_MINUS  &trans
 &trans  &trans      &trans  &trans  &trans  &trans            &trans  &trans  &trans   &none   &none  &trans  &trans     &trans  &trans       &kp KP_N4     &kp KP_N5     &kp KP_N6      &kp KP_PLUS  &trans
 &trans  &trans      &trans  &trans  &trans  &trans             &none   &none  &trans   &none   &none  &trans   &none      &none  &trans       &kp KP_N1     &kp KP_N2     &kp KP_N3     &kp KP_ENTER  &trans
 &trans  &trans  &kp INSERT  &trans  &trans                    &trans  &trans  &trans                  &trans  &trans  &kp KP_N0                  &trans        &trans    &kp KP_DOT     &kp KP_ENTER  &trans
            >;
        };

        layer_CNTRL {
            bindings = <
        &kp F1         &kp F2                             &kp F3           &kp F4     &kp F5           &kp F6            &trans                                                  &trans          &kp F7          &kp F8        &kp F9          &kp F10       &kp F11       &kp F12
 &kp C_BRI_DEC  &kp C_BRI_INC  &kp C_AC_DESKTOP_SHOW_ALL_WINDOWS  &kp C_AC_SEARCH  &kp PSCRN  &kp PAUSE_BREAK            &trans                                                  &trans      &kp C_PREV        &kp C_PP    &kp C_NEXT       &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP
        &trans         &trans                             &trans           &trans     &trans           &trans            &trans  &trans  &trans   &none   &none  &trans  &trans  &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW        &trans        &trans
        &trans         &trans                             &trans           &trans     &trans           &trans             &none   &none  &trans   &none   &none  &trans   &none   &none          &trans          &trans        &trans           &trans        &trans        &trans
        &trans         &trans                             &trans           &trans     &trans                             &trans  &trans  &trans                  &trans  &trans  &trans                          &trans        &trans           &trans        &trans        &trans
            >;
        };

        layer_WINDOW {
            bindings = <
 &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                  &trans  &trans         &trans          &trans         &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans                                                  &trans  &trans  &kp LC(LA(U))   &macro_win_mx  &macro_win_tr  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &macro_win_lh  &macro_win_alt  &macro_win_rh  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &macro_win_bl   &macro_win_mn  &macro_win_br  &trans  &trans
 &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans                  &trans  &trans  &trans                 &trans          &trans         &trans  &trans  &trans
            >;
        };

    };
};
