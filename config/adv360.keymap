#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        #include "macros.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        spc_shft: spc_shft {
            compatible = "zmk,behavior-hold-tap";
            label = "SPC_SHFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <175>;
            flavor = "balanced";
        };
        quexcl: quexcl {
            compatible = "zmk,behavior-mod-morph";
            label = "QUEXCL";
            bindings = <&kp QUESTION>, <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        semicomma: semicomma {
            compatible = "zmk,behavior-mod-morph";
            label = "SEMICOMMA";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        percolon: percolon {
            compatible = "zmk,behavior-mod-morph";
            label = "PERCOLON";
            bindings = <&kp PERIOD>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        lparen: lparen {
            compatible = "zmk,behavior-mod-morph";
            label = "LPAREN";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp NUMBER_4>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        rparen: rparen {
            compatible = "zmk,behavior-mod-morph";
            label = "RPAREN";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp N7>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        lbracket: lbracket {
            compatible = "zmk,behavior-mod-morph";
            label = "LBRACKET";
            bindings = <&kp LEFT_BRACKET>, <&kp NUMBER_2>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        rbracket: rbracket {
            compatible = "zmk,behavior-mod-morph";
            label = "RBRACKET";
            bindings = <&kp RIGHT_BRACKET>, <&kp N9>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        lbrace: lbrace {
            compatible = "zmk,behavior-mod-morph";
            label = "LBRACE";
            bindings = <&kp LEFT_BRACE>, <&kp NUMBER_3>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        rbrace: rbrace {
            compatible = "zmk,behavior-mod-morph";
            label = "RBRACE";
            bindings = <&kp RIGHT_BRACE>, <&kp N8>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        langle: langle {
            compatible = "zmk,behavior-mod-morph";
            label = "LANGLE";
            bindings = <&kp LESS_THAN>, <&kp N5>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        rangle: rangle {
            compatible = "zmk,behavior-mod-morph";
            label = "RANGLE";
            bindings = <&kp GREATER_THAN>, <&kp N6>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        plus1: plus1 {
            compatible = "zmk,behavior-mod-morph";
            label = "PLUS1";
            bindings = <&kp PLUS>, <&kp N1>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        minus0: minus0 {
            compatible = "zmk,behavior-mod-morph";
            label = "MINUS0";
            bindings = <&kp KP_MINUS>, <&kp N0>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <30 31>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <32 31>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <43 42>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <41 42>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&none  &plus1          &lbracket         &lbrace       &lparen           &langle  &none                                        &none                        &rangle  &rparen            &rbrace        &rbracket          &minus0           &none
&none  &kp Q           &kp W             &kp F         &kp P             &kp B    &none                                        &none                        &kp J    &kp L              &kp U          &kp Y              &kp SINGLE_QUOTE  &none
&none  &kp A           &kp R             &kp S         &kp T             &kp G    &none  &none  &none      &none  &none        &none                        &kp M    &kp N              &kp E          &kp I              &kp O             &none
&none  &kp Z           &kp X             &kp C         &kp D             &kp V                  &none      &none                                            &kp K    &kp H              &semicomma     &percolon          &quexcl           &none
&none  &kp LEFT_SHIFT  &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_COMMAND           &mo 2  &mo 1  &none      &none  &lt 3 ENTER  &spc_shft RIGHT_SHIFT SPACE           &kp RIGHT_COMMAND  &kp RIGHT_ALT  &kp RIGHT_CONTROL  &kp RIGHT_SHIFT   &none
            >;
        };

        symbols {
            bindings = <
&kp F1  &kp F2     &kp F3          &kp F4                &kp F5         &kp F6        &none                                       &none   &kp F7         &kp F8     &kp F9                 &kp F10           &kp F11      &kp F12
&trans  &kp CARET  &kp LESS_THAN   &kp LEFT_BRACKET      &kp PIPE       &kp QUESTION  &none                                       &none   &kp EXCL       &kp AT     &kp RIGHT_BRACKET      &kp GREATER_THAN  &kp PERCENT  &trans
&trans  &kp EQUAL  &kp LEFT_BRACE  &kp LEFT_PARENTHESIS  &kp UNDER      &kp COLON     &none   &trans  &trans      &trans  &trans  &none   &kp SEMICOLON  &kp MINUS  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE   &kp SLASH    &trans
&trans  &kp GRAVE  &kp AMPS        &kp STAR              &kp BACKSLASH  &kp DOT                       &trans      &trans                  &kp COMMA      &kp PLUS   &kp DOLLAR             &kp HASH          &kp TILDE    &trans
&trans  &trans     &trans          &trans                &trans                       &trans  &trans  &trans      &trans  &trans  &trans                 &trans     &trans                 &trans            &trans       &trans
            >;
        };

        arrows {
            bindings = <
&trans  &trans  &trans          &trans        &trans     &trans  &trans                                      &trans  &trans  &trans    &trans    &trans        &trans     &trans
&trans  &trans  &trans          &kp UP_ARROW  &trans     &trans  &trans                                      &trans  &trans  &trans    &trans    &trans        &trans     &trans
&trans  &trans  &kp LEFT_ARROW  &kp DOWN      &kp RIGHT  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &kp LEFT  &kp DOWN  &kp UP_ARROW  &kp RIGHT  &trans
&trans  &trans  &trans          &trans        &trans     &trans                  &trans      &trans                  &trans  &trans    &trans    &trans        &trans     &trans
&trans  &trans  &trans          &trans        &trans             &trans  &trans  &trans      &trans  &trans  &trans          &trans    &trans    &trans        &trans     &trans
            >;
        };

        numbers {
            bindings = <
&trans  &trans  &trans        &trans        &trans        &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp N7        &kp N8        &kp N9        &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp N0  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans                  &trans      &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans        &trans        &trans                &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
