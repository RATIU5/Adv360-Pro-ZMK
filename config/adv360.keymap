/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        #include "macros.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };
        paren: paren {
            compatible = "zmk,behavior-mod-morph";
            label = "PAREN";
            bindings =
                <&kp LEFT_PARENTHESIS>,
                <&kp RIGHT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        brace: brace {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACE";
            bindings =
                <&kp LEFT_BRACE>,
                <&kp RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        brack: brack {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACK";
            bindings =
                <&kp LEFT_BRACKET>,
                <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        than: than {
            compatible = "zmk,behavior-mod-morph";
            label = "THAN";
            bindings =
                <&kp LESS_THAN>,
                <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        slash: slash {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH";
            bindings =
                <&kp SLASH>,
                <&kp BSLH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        and_or: and_or {
            compatible = "zmk,behavior-mod-morph";
            label = "AND_OR";
            bindings =
                <&kp AMPERSAND>,
                <&kp PIPE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        athash: athash {
            compatible = "zmk,behavior-mod-morph";
            label = "ATHASH";
            bindings =
                <&kp AT>,
                <&kp HASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        dolper: dolper {
            compatible = "zmk,behavior-mod-morph";
            label = "DOLPER";
            bindings =
                <&kp DOLLAR>,
                <&kp PERCENT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        starcar: starcar {
            compatible = "zmk,behavior-mod-morph";
            label = "STARCAR";
            bindings =
                <&kp STAR>,
                <&kp CARET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        commsemi: commsemi {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMSEMI";
            bindings =
                <&kp COMMA>,
                <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        pericolo: pericolo {
            compatible = "zmk,behavior-mod-morph";
            label = "PERICOLO";
            bindings =
                <&kp KP_DOT>,
                <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        queexcl: queexcl {
            compatible = "zmk,behavior-mod-morph";
            label = "QUEEXCL";
            bindings =
                <&kp QUESTION>,
                <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        hm_slash: hm_slash {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_SLASH";
            bindings =
                <&kp>,
                <&slash>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
        };
        hm_and_or: hm_and_or {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_AND_OR";
            bindings =
                <&kp>,
                <&and_or>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&none             &none        &none           &none               &none  &none            &none                                                        &none  &none                &none            &none        &none              &none  &none
&none             &kp Q        &kp W           &kp F               &kp P  &kp B            &none                                                        &none  &kp J                &kp L            &kp U        &kp Y   &kp SINGLE_QUOTE  &none
&none  &hm LEFT_SHIFT A  &hm LCTRL R  &hm LEFT_ALT S  &hm LEFT_COMMAND T  &kp G            &none      &none  &none  &none  &none  &none      &none      &none  &kp M  &hm RIGHT_COMMAND N  &hm RIGHT_ALT E  &hm RCTRL I  &hm RIGHT_SHIFT O  &none
&none             &kp Z        &kp X           &kp C               &kp D  &kp V            &none      &none  &none  &none  &none  &none      &none      &none  &kp K                &kp H        &commsemi    &pericolo           &queexcl  &none
&none             &none        &none           &none               &none         &lt 2 BACKSPACE  &lt 1 TAB  &none                &none  &kp ENTER  &kp SPACE                       &none            &none        &none              &none  &none
            >;
        };

        layer_1 {
            bindings = <
&trans                      &trans                 &trans                    &trans                &trans  &trans  &trans                                                  &trans   &trans       &trans            &trans        &trans           &trans  &trans
&trans                       &none        &kp KP_NUMBER_7           &kp KP_NUMBER_8       &kp KP_NUMBER_9   &none  &trans                                                  &trans  &kp F12       &kp F7            &kp F8        &kp F9            &none  &trans
&trans  &hm LEFT_SHIFT KP_NUMBER_0  &hm LCTRL KP_NUMBER_4  &hm LEFT_ALT KP_NUMBER_5  &hm LCMD KP_NUMBER_6   &none  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp F10  &hm RCMD F4  &hm RIGHT_ALT F5  &hm RCTRL F6  &kp RIGHT_SHIFT  &trans
&trans                       &none              &kp KP_N1           &kp KP_NUMBER_2       &kp KP_NUMBER_3   &none  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp F11       &kp F1            &kp F2        &kp F3            &none  &trans
&trans                      &trans                 &trans                    &trans                &trans          &trans  &trans  &trans                  &trans  &trans  &trans                &trans            &trans        &trans           &trans  &trans
            >;
        };

        layer_2 {
            bindings = <
&trans                &trans             &trans                 &trans                  &trans  &trans  &trans                                                  &trans      &trans               &trans                    &trans              &trans                 &trans  &trans
&trans                 &than             &brack                 &brace                  &paren   &none  &trans                                                  &trans  &kp K_REDO          &kp K_PASTE                &kp K_COPY           &kp K_CUT             &kp K_UNDO  &trans
&trans  &hm LEFT_SHIFT GRAVE  &hm_slash LCTRL 0  &hm_and_or LEFT_ALT 0  &hm LEFT_COMMAND EQUAL   &none  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans       &none  &hm RCMD LEFT_ARROW  &hm RIGHT_ALT DOWN_ARROW  &hm RCTRL UP_ARROW  &hm RIGHT_SHIFT RIGHT  &trans
&trans               &athash            &dolper               &starcar               &kp MINUS   &none  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans       &none             &kp HOME             &kp PAGE_DOWN         &kp PAGE_UP                &kp END  &trans
&trans                &trans             &trans                 &trans                  &trans          &trans  &trans  &trans                  &trans  &trans  &trans                           &trans                    &trans              &trans                 &trans  &trans
            >;
        };
    };
};
