/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
/* THIS FILE WAS GENERATED!
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        #include "macros.dtsi"

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings =
                <&kp>,
                <&kp>;
        };
        paren: paren {
            compatible = "zmk,behavior-mod-morph";
            label = "PAREN";
            bindings =
                <&kp LEFT_PARENTHESIS>,
                <&kp RIGHT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        brace: brace {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACE";
            bindings =
                <&kp LEFT_BRACE>,
                <&kp RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        brack: brack {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACK";
            bindings =
                <&kp LEFT_BRACKET>,
                <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        than: than {
            compatible = "zmk,behavior-mod-morph";
            label = "THAN";
            bindings =
                <&kp LESS_THAN>,
                <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        slash: slash {
            compatible = "zmk,behavior-mod-morph";
            label = "SLASH";
            bindings =
                <&kp SLASH>,
                <&kp BSLH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        and_or: and_or {
            compatible = "zmk,behavior-mod-morph";
            label = "AND_OR";
            bindings =
                <&kp AMPERSAND>,
                <&kp PIPE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        athash: athash {
            compatible = "zmk,behavior-mod-morph";
            label = "ATHASH";
            bindings =
                <&kp AT>,
                <&kp HASH>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        dolper: dolper {
            compatible = "zmk,behavior-mod-morph";
            label = "DOLPER";
            bindings =
                <&kp DOLLAR>,
                <&kp PERCENT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        starcar: starcar {
            compatible = "zmk,behavior-mod-morph";
            label = "STARCAR";
            bindings =
                <&kp STAR>,
                <&kp CARET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        commsemi: commsemi {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMSEMI";
            bindings =
                <&kp COMMA>,
                <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        pericolo: pericolo {
            compatible = "zmk,behavior-mod-morph";
            label = "PERICOLO";
            bindings =
                <&kp KP_DOT>,
                <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        queexcl: queexcl {
            compatible = "zmk,behavior-mod-morph";
            label = "QUEEXCL";
            bindings =
                <&kp QUESTION>,
                <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        hm_slash: hm_slash {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_SLASH";
            bindings =
                <&kp>,
                <&slash>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
        };
        hm_and_or: hm_and_or {
            compatible = "zmk,behavior-hold-tap";
            label = "HM_AND_OR";
            bindings =
                <&kp>,
                <&and_or>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };
        hold_quexcl: hold_quexcl {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_QUEXCL";
            bindings =
                <&lt>,
                <&queexcl>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&none             &none        &none           &none               &none  &none  &none                                                        &none  &none                &none            &none        &none              &none  &none
&none             &kp Q        &kp W           &kp F               &kp P  &kp B  &none                                                        &none  &kp J                &kp L            &kp U        &kp Y   &kp SINGLE_QUOTE  &none
&none  &hm LEFT_SHIFT A  &hm LCTRL R  &hm LEFT_ALT S  &hm LEFT_COMMAND T  &kp G  &none          &none  &none  &none  &none  &none      &none  &none  &kp M  &hm RIGHT_COMMAND N  &hm RIGHT_ALT E  &hm RCTRL I  &hm RIGHT_SHIFT O  &none
&none             &kp Z        &kp X           &kp C               &kp D  &kp V  &none          &none  &none  &none  &none  &none      &none  &none  &kp K                &kp H        &commsemi    &pericolo   &hold_quexcl 1 0  &none
&none             &none        &none           &none               &none         &mo 2  &kp BACKSPACE  &none                &none  &kp SPACE  &mo 1                       &none            &none        &none              &none  &none
            >;
        };

        sym {
            bindings = <
&trans                &trans                &trans                         &trans          &trans  &trans  &trans                                                  &trans  &trans                   &trans                           &trans                 &trans                 &trans  &trans
&trans             &kp CARET         &kp LESS_THAN               &kp LEFT_BRACKET        &kp PIPE   &none  &trans                                                  &trans   &none                   &kp AT                &kp RIGHT_BRACKET       &kp GREATER_THAN            &kp PERCENT  &trans
&trans  &hm LEFT_SHIFT EQUAL  &hm LCTRL LEFT_BRACE  &hm LEFT_ALT LEFT_PARENTHESIS  &hm LCMD UNDER   &none  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans   &none  &hm RIGHT_COMMAND MINUS  &hm RIGHT_ALT RIGHT_PARENTHESIS  &hm RCTRL RIGHT_BRACE  &hm RIGHT_SHIFT SLASH  &trans
&trans             &kp GRAVE              &kp AMPS                       &kp STAR   &kp BACKSLASH   &none  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans   &none                 &kp PLUS                       &kp DOLLAR               &kp HASH              &kp TILDE  &trans
&trans                &trans                &trans                         &trans          &trans           &mo 3  &trans  &trans                  &trans  &trans  &trans                           &trans                           &trans                 &trans                 &trans  &trans
            >;
        };

        ext {
            bindings = <
&trans          &trans        &trans            &trans            &trans  &trans  &trans                                                  &trans  &trans          &trans          &trans        &trans           &trans  &trans
&trans      &kp K_MUTE    &kp K_PREV  &kp K_PLAY_PAUSE        &kp K_NEXT   &none  &trans                                                  &trans  &trans   &kp BACKSPACE         &kp TAB       &kp DEL       &kp ESCAPE  &trans
&trans  &kp LEFT_SHIFT     &kp LCTRL      &kp LEFT_ALT  &kp LEFT_COMMAND   &none  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT_ARROW  &trans
&trans         &kp ESC  &kp C_VOL_DN      &kp C_VOL_UP      &kp C_REPEAT  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans        &kp HOME   &kp PAGE_DOWN   &kp PAGE_UP          &kp END  &trans
&trans          &trans        &trans            &trans            &trans          &trans  &trans  &trans                  &trans  &trans   &mo 3                  &trans          &trans        &trans           &trans  &trans
            >;
        };

        num {
            bindings = <
&trans           &trans           &trans           &trans           &trans  &trans  &trans                                                  &trans  &trans             &trans         &trans     &trans           &trans  &trans
&trans           &trans  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &trans  &trans                                                  &trans  &trans             &trans         &trans     &trans           &trans  &trans
&trans  &kp KP_NUMBER_0  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp RIGHT_COMMAND  &kp RIGHT_ALT  &kp RCTRL  &kp RIGHT_SHIFT  &trans
&trans           &trans  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans             &trans         &trans     &trans           &trans  &trans
&trans           &trans           &trans           &trans           &trans          &trans  &trans  &trans                  &trans  &trans  &trans                     &trans         &trans     &trans           &trans  &trans
            >;
        };
    };
};
